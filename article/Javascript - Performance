Javascript - Performance

说明：关于运行时间的数据仅能提供相对的比较。

-- 遍历数组时避免使用 for ... in ...

    var M = 100000;
    var A = new Array(M);
    for (var i = 0; i < M; ++i) { A[i] = i; }

    // 1
    for (var i = 0; i < M; ++i) { A[i] = 0; }
    // 2
    for (var x in A) { A[x] = 0; }
    // 3
    for (var x in A) { x = 0; } // 注意：A 里的元素不会被设0

Firefox 3: 1 - 7ms; 2 - 54ms; 3 - 28ms
IE 8: 1 - 31ms; 2 - 900ms; 3 - 876ms
Google Chrome: 1 - 1ms; 2 - 36ms; 3 - 26ms

"The for...in statement is used to loop (iterate) through the elements of an array or through the properties of an object." 所以这里还有一个问题，比如往Array的prototype里加一个function：

    Array.prototype.clear = function() { ... }

那么这个clear function也会被 for ... in ... 枚举出来。

-- 比较数组是否相等

    // 1
    function isEqualArray(a, b) {
        return (a.toString() == b.toString());
    }

    // 2
    function isEqualArray(a, b) {
        if (a.length != b.length) { return false; }
        for (var i = 0; i < a.length; ++i) {
            if (a[i] != b[i]) { return false; }
        }
        return true;
    }

方法一比较简洁，但是速度奇慢；方法二很快，但是假定数组元素是可以用 != 比较的（number, string, etc.）。

-- 访问对象成员的代价

    var M = 1000000;

    // 1
    this.V = 0;
    for (var i = 0; i < M; ++i) { this.V = i; }

    // 2
    var V = 0;
    for (var i = 0; i < M; ++i) { V = i }

Firefox 3: 1 - 760ms; 2 - 56ms
IE 8: 1 - 2930ms; 2 - 187ms
Google Chrome: 1 - 12ms; 2 - 4ms

所以应该在循环里避免直接访问对象成员。可用临时变量代替，先把成员赋给临时变量，等循环结束了再更新成员，如果只是read则不必更新，如果成员的type是object，那么临时变量是它的引用，是浅拷贝，也不必更新。如果临时变量引用了type为object的成员，那么相当于预先索引到那个成员，不必每次都去找了，所以同样可以节省运行时间。

-- 深拷贝 & 浅拷贝

深拷贝：typeof 为 number, string, boolean, function, etc. 者
浅拷贝：typeof 为 object 者

-- 如果知道数组大小，开始就分配好，不要用 push

    var M = 1000000;

    // 1
    var arr1 = new Array(M);
    for (var i = 0; i < M; ++i) { arr1[i] = i; }

    // 2
    var arr2 = [];
    for (var i = 0; i < M; ++i) { arr2.push(i); }

Firefox 3: 1 - 101ms; 2 - 127ms
IE 8: 1 - 323ms; 2 - 828ms
Google Chrome: 1 - 72ms; 2 - 62ms

Google Chrome 是个例外，代码二反而快一些。

-- 遍历数组时，像如下的终止条件

    for (var i = 0; i < arr.length; ++i)

最好改成

    var arrlen = arr.length;
    for (var i = 0; i < arrlen; ++i)


